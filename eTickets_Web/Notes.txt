25.12.2023-Gün:1
----------------

1. Sistem içersinde kullanılacak olan Modellerin(table) yaratılması.
	- Actor
	- Cinema
	- Movie
	- Producer
	- Director
	- MovieCategory 

	! Her modelde ortak olabilecek alanları (bu örnekte Id alanları) hepsi için ayrı ayrı belirtmek yerine tabanda kullanılacak bir Interface yapısı yararlı olacaktır. Yani modeller bu Interface'i implement ederek gerekli alanları üzerlerine alabileceklerdir.

	! Diğer taraftan bir depo(Repository) yapısı kullanmak faydalı olacaktır. Tüm modeller üzerinde kullanılacak olan kayıtları listeleme, kayıt ekleme/güncelleme/silme vs vs. işlemleri için..

	-- Modellerin yaratılması

2. Gerekli Nuget paketlerinin yüklenmesi (db..EntityFramework ile ilgili)

3. AppDbContext yapısını oluşturalım.
	Normalde EF'in DbContext sınıfından Inherit yapardık. Fakat bu projede ilerde Identity(Authorization,Authentication) [Kimlik Denetimi(Yetkilendirme,Kimlik Doğrulama)] yapısı kullanılacağı için DbContext den değil de hazır bu tür şeyler için yapılmış IdentityDbContext kullanılacak.Bu kullanımdan önce bir ApplicationUser sınıfı yaratalım.

4. Program.cs altına -> DbContext servisinin eklenmesi(registre edilmesi) (parametresiz olarak)

5. Örnek verilerle db nin yaratılabilmesi için bir AppDbInitializer.cs yaratalım


2.gün
-----

Gerekli tüm controller ların üretilmesi
Actor
Cinema
Movie
Producer



3.gün (27.12.23)
----------------
- Actor "
- Cinema model tarafında ve index view da değişiklikler yapıldı. Interface yapısı implemente edildi.
- Producer "

- Bu 3 tablo daha basit bir yapıda idi. Fakat Movie modeli biraz farklı. Bu yüzden biraz daha farklı bir yönden yaklaşabiliriz.Yani ViewModel(DataTransferObject) yapısını kullanma durumu.


4.gün (28.12.23)
----------------
- Ana ekranda Kullanıcı Giriş/Kayıt bölümlerinin yapılması

- Buna göre sisteme giren kullanıcı tipine göre frontend tarafında yapılacak değişiklikler


5.gün (02.01.2024)
------------------

Normalde veri alışverişini controllerler üzerinden yapıldığı durumlar vardır. Bazen bu pek doğru bir yol olmayabilir. Bunun yerine bu tür benzer işleri gerçekleştirebilecek olan Interface-Servis(Service) yapısını adapte etmek daha doğru olacaktır. Yani gerçekleştirilecek durumları daha geri plana almak (güvenlik açısından) yerinde olabilir.

* Actor bilgileriyle çalışma
	Bunun için öncelikle Data/Interfaces dizini altına IActorsService interface'i yaratalım. Sonrasında da Data/Services altında ActorsService isimli classı oluşturuyoruz.

* Cinema bilgileriyle çalışma
	Bunun için öncelikle Data/Interfaces dizini altına ICinemasService interface'i yaratalım. Sonrasında da Data/Services altında CinemasService isimli classı oluşturuyoruz.

* Producer bilgileriyle çalışma
	Bunun için öncelikle Data/Interfaces dizini altına IProducersService interface'i yaratalım. Sonrasında da Data/Services altında ProducersService isimli classı oluşturuyoruz.

* Movie bilgileriyle çalışma
	Bunun için öncelikle Data/Interfaces dizini altına IMoviesService interface'i yaratalım. Sonrasında da Data/Services altında MoviessService isimli classı oluşturuyoruz.
	Bu interfacein yapısı diğerlerinden farklı . çünkü db tablosu biraz farklı yapıda .İlişkilendirmeler var.Kodlarda ona göre değişiklik gösteriyor.

Bu yazılanların birer servis olarak hizmet edebilmesi için Program.cs altında tanımlanmaları gerekmektedir


6.gün (04.01.2024)
-------------------
Gerekli bazı metotsal düzenlemelerin EntityBaseRepository.cs altında yapılması
GetAll...

